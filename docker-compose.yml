services:
  postgres:
    image: postgres:16-alpine
    container_name: wishper_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-wishper_db}
      POSTGRES_USER: ${POSTGRES_USER:-wishper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-wishper_user} -d ${POSTGRES_DB:-wishper_db}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - wishper_network

  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: wishper_api
    ports:
      - '3001:3001'
    environment:
      # Application
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 3001
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-wishper_user}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE:-wishper_db}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3001/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wishper_network

volumes:
  postgres_data:
    driver: local

networks:
  wishper_network:
    driver: bridge
